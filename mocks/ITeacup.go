// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	redis "github.com/go-redis/redis/v8"
	mock "github.com/stretchr/testify/mock"

	teacup "github.com/betafish-inc/teacup"
)

// ITeacup is an autogenerated mock type for the ITeacup type
type ITeacup struct {
	mock.Mock
}

// Context provides a mock function with given fields:
func (_m *ITeacup) Context() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Option provides a mock function with given fields: ctx, key
func (_m *ITeacup) Option(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Queue provides a mock function with given fields:
func (_m *ITeacup) Queue() teacup.IQueue {
	ret := _m.Called()

	var r0 teacup.IQueue
	if rf, ok := ret.Get(0).(func() teacup.IQueue); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(teacup.IQueue)
		}
	}

	return r0
}

// Redis provides a mock function with given fields: ctx
func (_m *ITeacup) Redis(ctx context.Context) (*redis.Client, error) {
	ret := _m.Called(ctx)

	var r0 *redis.Client
	if rf, ok := ret.Get(0).(func(context.Context) *redis.Client); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: worker
func (_m *ITeacup) Register(worker teacup.IWorker) {
	_m.Called(worker)
}

// Secret provides a mock function with given fields: ctx, key
func (_m *ITeacup) Secret(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceAddr provides a mock function with given fields: ctx, name, port
func (_m *ITeacup) ServiceAddr(ctx context.Context, name string, port int) string {
	ret := _m.Called(ctx, name, port)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, int) string); ok {
		r0 = rf(ctx, name, port)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ServiceAddrs provides a mock function with given fields: ctx, name, port
func (_m *ITeacup) ServiceAddrs(ctx context.Context, name string, port int) []string {
	ret := _m.Called(ctx, name, port)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []string); ok {
		r0 = rf(ctx, name, port)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *ITeacup) Start() {
	_m.Called()
}

// Stop provides a mock function with given fields:
func (_m *ITeacup) Stop() {
	_m.Called()
}
